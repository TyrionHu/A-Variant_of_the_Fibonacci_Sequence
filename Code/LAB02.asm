        .ORIG   X3000;INITIALIZATION        AND R0, R0, #0        AND R1, R1, #0        AND R2, R2, #0        AND R3, R3, #0        AND R4, R4, #0        AND R5, R5, #0        AND R6, R6, #0        AND R7, R7, #0                LD  R0, STOREP        STI R0, STOREX3100      ;STORE P IN MEM[X3100]        LD  R0, STOREQ        STI R0, STOREX3101      ;STORE Q IN MEM[X3101]        LD  R0, STOREN        STI R0, STOREX3102      ;STORE N IN MEM[X3102]                AND R0, R0, #0        STI R0, STOREX3103      ;THE RESULT WILL BE SAVED HERE. FIRST FILL IT WITH A ZERO        LDI R0, STOREX3102      ;R0 = N        LD  R6, STOREX4000      ;R6 IS THE STACK POINTER;START THE MAIN PROGRAM        JSR VFS        STI R1, STOREX3103      ;THE RESULT IS R1                HALT;VFS(Variant of Fibonacci Sequence) subroutine;VFS(0) = 1;VFS(1) = 1;VFS(N) = VFS(N - 2) % P + VFS(N - 1)  % Q;;Input: R0(N);R2, R3, R4, R5 will be used ;Return answer in R1VFS     ADD R6, R6, #-1 ;        STR R7, R6, #0  ;PUSH R7, THE RETURN LINKAGE        ADD R6, R6, #-1 ;        STR R0, R6, #0  ;PUSH R0, THE VALUE OF N        ADD R6, R6, #-1 ;        STR R2, R6, #0  ;PUSH R2, WHICH IS NEEDED IN THE SUBROUTINE        ADD R6, R6, #-1 ;        STR R3, R6, #0  ;PUSH R3, WHICH IS NEEDED IN THE SUBROUTINE        ADD R6, R6, #-1 ;        STR R4, R6, #0  ;PUSH R4, WHICH IS NEEDED IN THE SUBROUTINE        ADD R6, R6, #-1 ;        STR R5, R6, #0  ;PUSH R5, WHICH IS NEEDED IN THE SUBROUTINE                AND R1, R1, #0      ;STORE F        ADD R1, R1, #1      ;F = 1                AND R2, R2, #0      ;STORE F0        ADD R2, R2, #1      ;F0 = 1                AND R3, R3, #0      ;STORE F1        ADD R3, R3, #1      ;F1 = 1                AND R4, R4, #0         AND R5, R5, #0          TEST1   ADD R5, R0, #-1         BRNZ    DONE1       ;IF(N == 0 OR N == 1)                ADD R4, R2, #0      ;R4 = F0        LDI R5, STOREX3100  ;R5 = P        JSR MOD             ;R4 = F0 % P        ADD R1, R4, #0      ;R1 = F0 % P                ADD R4, R3, #0      ;R4 = F1        LDI R5, STOREX3101  ;R5 = Q        JSR MOD             ;R4 = F1 % Q        ADD R1, R1, R4      ;R1 = F0 % P + F1 % Q                ADD R2, R3, #0      ;F0 <- F1        ADD R3, R1, #0      ;F1 <- F        ADD R0, R0 #-1      ;N--                BRNZP   TEST1        ;ITS THE BASE CASE WHEN N IS 0 OR 1        ;RESTORE REGISTERS AND RETURNDONE1   LDR R5, R6, #0  ;RESTORE R5        ADD R6, R6, #1        LDR R4, R6, #0  ;RESTORE R4        ADD R6, R6, #1        LDR R3, R6, #0  ;RESTORE R3        ADD R6, R6, #1        LDR R2, R6, #0  ;RESTORE R2        ADD R6, R6, #1        LDR R0, R6, #0  ;RESTORE RO        ADD R6, R6, #1        LDR R7, R6, #0  ;RESTORE R7        ADD R6, R6, #1        RET;MOD subroutine;Instance: N % A;Input: R4(N); R5(A);R1, R2 WILL BE USED IN THIS SUBROUTINE;Return answer in R4MOD     ADD R6, R6, #-1 ;        STR R7, R6, #0  ;PUSH R7, THE RETURN LINKAGE        ADD R6, R6, #-1 ;        STR R1, R6, #0  ;PUSH R1, WHICH IS NEEDED IN THE SUBROUTINE        ADD R6, R6, #-1 ;        STR R2, R6, #0  ;PUSH R2, WHICH IS NEEDED IN THE SUBROUTINE                AND R2, R2, #0  ;R2 IS THE COUNTER                JSR SUB        ADD R4, R4, #0        TEST2   BRn SKIP2        ADD R2, R2, #1        JSR SUB        ADD R4, R4, #0        BRnzp   TEST2;THE CONDITION OF THE LOOP IS SATISFIED    SKIP2   ADD R4, R4, R5        BRnzp DONE2        DONE2   LDR R2, R6, #0  ;RESTORE R2        ADD R6, R6, #1        LDR R1, R6, #0  ;RESTORE R1        ADD R6, R6, #1        LDR R7, R6, #0  ;RESTORE R7        ADD R6, R6, #1        RET;SUB(SUBSTRACT) SUBROUTINE;A - B;INPUT: R4(A); R5(B);R3 IS NEEDED IN THIS SUBROUTINE;RETURN ANSWER IN R4SUB     ADD R6, R6, #-1 ;        STR R7, R6, #0  ;PUSH R7, THE RETURN LINKAGE        ADD R6, R6, #-1 ;        STR R3, R6, #0  ;PUSH R3, WHICH IS NEEDED IN THE SUBROUTINE                NOT R3, R5        ADD R3, R3, #1  ;R3 = - R5                ADD R4, R4, R3  ;R4 = R4 - R5                BRnzp   DONE3        DONE3   LDR R3, R6, #0  ;RESTORE R3        ADD R6, R6, #1        LDR R7, R6, #0  ;RESTORE R7        ADD R6, R6, #1        RETSTOREX3100      .FILL   X3100STOREX3101      .FILL   X3101STOREX3102      .FILL   X3102STOREX3103      .FILL   X3103STOREX4000      .FILL   X4000STOREP          .FILL   X0400STOREQ          .FILL   X0315STOREN          .FILL   X012C                .END